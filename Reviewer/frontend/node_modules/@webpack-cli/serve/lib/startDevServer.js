"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * Starts the devServer
 *
 * @param {Object} compiler - a webpack compiler
 * @param {Object} devServerCliOptions - dev server CLI options
 * @param {Object} cliOptions - CLI options
 * @param {Object} logger - logger
 *
 * @returns {Object[]} array of resulting servers
 */
async function startDevServer(compiler, devServerCliOptions, cliOptions, logger) {
    let devServerVersion, Server;
    try {
        // eslint-disable-next-line node/no-extraneous-require
        devServerVersion = require("webpack-dev-server/package.json").version;
        // eslint-disable-next-line node/no-extraneous-require
        Server = require("webpack-dev-server");
    }
    catch (err) {
        logger.error(`You need to install 'webpack-dev-server' for running 'webpack serve'.\n${err}`);
        process.exit(2);
    }
    const mergeOptions = (devServerOptions, devServerCliOptions) => {
        // CLI options should take precedence over devServer options,
        // and CLI options should have no default values included
        const options = Object.assign(Object.assign({}, devServerOptions), devServerCliOptions);
        if (devServerOptions.client && devServerCliOptions.client) {
            // the user could set some client options in their devServer config,
            // then also specify client options on the CLI
            options.client = Object.assign(Object.assign({}, devServerOptions.client), devServerCliOptions.client);
        }
        return options;
    };
    const isMultiCompiler = Boolean(compiler.compilers);
    let compilersWithDevServerOption;
    if (isMultiCompiler) {
        compilersWithDevServerOption = compiler.compilers.filter((compiler) => compiler.options.devServer);
        // No compilers found with the `devServer` option, let's use first compiler
        if (compilersWithDevServerOption.length === 0) {
            compilersWithDevServerOption = [compiler.compilers[0]];
        }
    }
    else {
        compilersWithDevServerOption = [compiler];
    }
    const isDevServer4 = devServerVersion.startsWith("4");
    const usedPorts = [];
    const devServersOptions = [];
    for (const compilerWithDevServerOption of compilersWithDevServerOption) {
        const options = mergeOptions(compilerWithDevServerOption.options.devServer || {}, devServerCliOptions);
        if (!isDevServer4) {
            const getPublicPathOption = () => {
                const n